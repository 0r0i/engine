// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Envelope
	Empty
	StreamMessage
	Block
	Transaction
	PeerTable
	Peer
	ConsensusMessage
	View
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Envelope struct {
	// marshalled Message
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// signed Message
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// sender's public key
	Pubkey []byte `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *Envelope) Reset()                    { *m = Envelope{} }
func (m *Envelope) String() string            { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()               {}
func (*Envelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Envelope) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Envelope) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StreamMessage struct {
	Channel []byte `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*StreamMessage_Block
	//	*StreamMessage_Transaction
	//	*StreamMessage_PeerTable
	//	*StreamMessage_ConsensusMessage
	Content isStreamMessage_Content `protobuf_oneof:"content"`
}

func (m *StreamMessage) Reset()                    { *m = StreamMessage{} }
func (m *StreamMessage) String() string            { return proto.CompactTextString(m) }
func (*StreamMessage) ProtoMessage()               {}
func (*StreamMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isStreamMessage_Content interface {
	isStreamMessage_Content()
}

type StreamMessage_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,oneof"`
}
type StreamMessage_Transaction struct {
	Transaction *Transaction `protobuf:"bytes,3,opt,name=transaction,oneof"`
}
type StreamMessage_PeerTable struct {
	PeerTable *PeerTable `protobuf:"bytes,4,opt,name=peerTable,oneof"`
}
type StreamMessage_ConsensusMessage struct {
	ConsensusMessage *ConsensusMessage `protobuf:"bytes,5,opt,name=consensusMessage,oneof"`
}

func (*StreamMessage_Block) isStreamMessage_Content()            {}
func (*StreamMessage_Transaction) isStreamMessage_Content()      {}
func (*StreamMessage_PeerTable) isStreamMessage_Content()        {}
func (*StreamMessage_ConsensusMessage) isStreamMessage_Content() {}

func (m *StreamMessage) GetContent() isStreamMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *StreamMessage) GetChannel() []byte {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *StreamMessage) GetBlock() *Block {
	if x, ok := m.GetContent().(*StreamMessage_Block); ok {
		return x.Block
	}
	return nil
}

func (m *StreamMessage) GetTransaction() *Transaction {
	if x, ok := m.GetContent().(*StreamMessage_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (m *StreamMessage) GetPeerTable() *PeerTable {
	if x, ok := m.GetContent().(*StreamMessage_PeerTable); ok {
		return x.PeerTable
	}
	return nil
}

func (m *StreamMessage) GetConsensusMessage() *ConsensusMessage {
	if x, ok := m.GetContent().(*StreamMessage_ConsensusMessage); ok {
		return x.ConsensusMessage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamMessage_OneofMarshaler, _StreamMessage_OneofUnmarshaler, _StreamMessage_OneofSizer, []interface{}{
		(*StreamMessage_Block)(nil),
		(*StreamMessage_Transaction)(nil),
		(*StreamMessage_PeerTable)(nil),
		(*StreamMessage_ConsensusMessage)(nil),
	}
}

func _StreamMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamMessage)
	// content
	switch x := m.Content.(type) {
	case *StreamMessage_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *StreamMessage_Transaction:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transaction); err != nil {
			return err
		}
	case *StreamMessage_PeerTable:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PeerTable); err != nil {
			return err
		}
	case *StreamMessage_ConsensusMessage:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConsensusMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamMessage.Content has unexpected type %T", x)
	}
	return nil
}

func _StreamMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamMessage)
	switch tag {
	case 2: // content.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMessage_Block{msg}
		return true, err
	case 3: // content.transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMessage_Transaction{msg}
		return true, err
	case 4: // content.peerTable
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PeerTable)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMessage_PeerTable{msg}
		return true, err
	case 5: // content.consensusMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConsensusMessage)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMessage_ConsensusMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamMessage)
	// content
	switch x := m.Content.(type) {
	case *StreamMessage_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_Transaction:
		s := proto.Size(x.Transaction)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_PeerTable:
		s := proto.Size(x.PeerTable)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_ConsensusMessage:
		s := proto.Size(x.ConsensusMessage)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Block struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Block) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Transaction struct {
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PeerTable struct {
	MyID    string           `protobuf:"bytes,1,opt,name=MyID" json:"MyID,omitempty"`
	PeerMap map[string]*Peer `protobuf:"bytes,2,rep,name=PeerMap" json:"PeerMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PeerTable) Reset()                    { *m = PeerTable{} }
func (m *PeerTable) String() string            { return proto.CompactTextString(m) }
func (*PeerTable) ProtoMessage()               {}
func (*PeerTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PeerTable) GetMyID() string {
	if m != nil {
		return m.MyID
	}
	return ""
}

func (m *PeerTable) GetPeerMap() map[string]*Peer {
	if m != nil {
		return m.PeerMap
	}
	return nil
}

type Peer struct {
	IpAddress string `protobuf:"bytes,1,opt,name=ipAddress" json:"ipAddress,omitempty"`
	Port      string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	PeerID    string `protobuf:"bytes,3,opt,name=peerID" json:"peerID,omitempty"`
	HeartBeat int32  `protobuf:"varint,4,opt,name=heartBeat" json:"heartBeat,omitempty"`
	PubKey    []byte `protobuf:"bytes,5,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Peer) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *Peer) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *Peer) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *Peer) GetHeartBeat() int32 {
	if m != nil {
		return m.HeartBeat
	}
	return 0
}

func (m *Peer) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type ConsensusMessage struct {
	ConsensusID string `protobuf:"bytes,1,opt,name=ConsensusID" json:"ConsensusID,omitempty"`
	View        *View  `protobuf:"bytes,2,opt,name=View" json:"View,omitempty"`
	SequenceID  int64  `protobuf:"varint,3,opt,name=SequenceID" json:"SequenceID,omitempty"`
	Block       *Block `protobuf:"bytes,4,opt,name=Block" json:"Block,omitempty"`
	SenderID    string `protobuf:"bytes,5,opt,name=SenderID" json:"SenderID,omitempty"`
	MsgType     int32  `protobuf:"varint,6,opt,name=MsgType" json:"MsgType,omitempty"`
}

func (m *ConsensusMessage) Reset()                    { *m = ConsensusMessage{} }
func (m *ConsensusMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsensusMessage) ProtoMessage()               {}
func (*ConsensusMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ConsensusMessage) GetConsensusID() string {
	if m != nil {
		return m.ConsensusID
	}
	return ""
}

func (m *ConsensusMessage) GetView() *View {
	if m != nil {
		return m.View
	}
	return nil
}

func (m *ConsensusMessage) GetSequenceID() int64 {
	if m != nil {
		return m.SequenceID
	}
	return 0
}

func (m *ConsensusMessage) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *ConsensusMessage) GetSenderID() string {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *ConsensusMessage) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

type View struct {
	ViewID   string   `protobuf:"bytes,1,opt,name=ViewID" json:"ViewID,omitempty"`
	LeaderID string   `protobuf:"bytes,2,opt,name=LeaderID" json:"LeaderID,omitempty"`
	PeerID   []string `protobuf:"bytes,3,rep,name=PeerID" json:"PeerID,omitempty"`
}

func (m *View) Reset()                    { *m = View{} }
func (m *View) String() string            { return proto.CompactTextString(m) }
func (*View) ProtoMessage()               {}
func (*View) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *View) GetViewID() string {
	if m != nil {
		return m.ViewID
	}
	return ""
}

func (m *View) GetLeaderID() string {
	if m != nil {
		return m.LeaderID
	}
	return ""
}

func (m *View) GetPeerID() []string {
	if m != nil {
		return m.PeerID
	}
	return nil
}

func init() {
	proto.RegisterType((*Envelope)(nil), "message.Envelope")
	proto.RegisterType((*Empty)(nil), "message.Empty")
	proto.RegisterType((*StreamMessage)(nil), "message.StreamMessage")
	proto.RegisterType((*Block)(nil), "message.Block")
	proto.RegisterType((*Transaction)(nil), "message.Transaction")
	proto.RegisterType((*PeerTable)(nil), "message.PeerTable")
	proto.RegisterType((*Peer)(nil), "message.Peer")
	proto.RegisterType((*ConsensusMessage)(nil), "message.ConsensusMessage")
	proto.RegisterType((*View)(nil), "message.View")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamService service

type StreamServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (StreamService_StreamClient, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (StreamService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[0], c.cc, "/message.StreamService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceStreamClient{stream}
	return x, nil
}

type StreamService_StreamClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type streamServiceStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceStreamClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceStreamClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamService service

type StreamServiceServer interface {
	Stream(StreamService_StreamServer) error
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).Stream(&streamServiceStreamServer{stream})
}

type StreamService_StreamServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type streamServiceStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceStreamServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceStreamServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _StreamService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}

// Client API for PeerService service

type PeerServiceClient interface {
	GetPeer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Peer, error)
}

type peerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPeerServiceClient(cc *grpc.ClientConn) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) GetPeer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Peer, error) {
	out := new(Peer)
	err := grpc.Invoke(ctx, "/message.PeerService/GetPeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PeerService service

type PeerServiceServer interface {
	GetPeer(context.Context, *Empty) (*Peer, error)
}

func RegisterPeerServiceServer(s *grpc.Server, srv PeerServiceServer) {
	s.RegisterService(&_PeerService_serviceDesc, srv)
}

func _PeerService_GetPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).GetPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.PeerService/GetPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).GetPeer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeer",
			Handler:    _PeerService_GetPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// Client API for TestConsensusService service

type TestConsensusServiceClient interface {
	StartConsensus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type testConsensusServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestConsensusServiceClient(cc *grpc.ClientConn) TestConsensusServiceClient {
	return &testConsensusServiceClient{cc}
}

func (c *testConsensusServiceClient) StartConsensus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/message.TestConsensusService/StartConsensus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestConsensusService service

type TestConsensusServiceServer interface {
	StartConsensus(context.Context, *Empty) (*Empty, error)
}

func RegisterTestConsensusServiceServer(s *grpc.Server, srv TestConsensusServiceServer) {
	s.RegisterService(&_TestConsensusService_serviceDesc, srv)
}

func _TestConsensusService_StartConsensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestConsensusServiceServer).StartConsensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.TestConsensusService/StartConsensus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestConsensusServiceServer).StartConsensus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestConsensusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.TestConsensusService",
	HandlerType: (*TestConsensusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartConsensus",
			Handler:    _TestConsensusService_StartConsensus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x54, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0x4e, 0xda, 0xa6, 0x59, 0x4e, 0xd6, 0x69, 0x3f, 0x6b, 0xfa, 0x29, 0x14, 0x04, 0xc3, 0x20,
	0x34, 0x71, 0x31, 0xa1, 0xc0, 0xc5, 0xc6, 0x1d, 0x63, 0xd5, 0x3a, 0x46, 0xa5, 0xc9, 0xad, 0xb8,
	0xe0, 0xce, 0x4d, 0x8f, 0xb6, 0x6a, 0x99, 0x13, 0x1c, 0x77, 0x28, 0x2f, 0xc0, 0x0b, 0xf0, 0x0c,
	0x3c, 0x11, 0x2f, 0x84, 0xec, 0x38, 0x49, 0xd7, 0x5e, 0xc5, 0xdf, 0x77, 0xce, 0xf9, 0x7c, 0xfe,
	0xc5, 0x30, 0xb8, 0xc7, 0xa2, 0xe0, 0x37, 0x78, 0x9c, 0xcb, 0x4c, 0x65, 0xc4, 0xb7, 0x90, 0x7e,
	0x87, 0x9d, 0x91, 0x78, 0xc0, 0x34, 0xcb, 0x91, 0x44, 0xe0, 0xe7, 0xbc, 0x4c, 0x33, 0xbe, 0x88,
	0xdc, 0x43, 0xf7, 0x68, 0x97, 0xd5, 0x90, 0x3c, 0x83, 0xa0, 0x58, 0xde, 0x08, 0xae, 0x56, 0x12,
	0xa3, 0x8e, 0xb1, 0xb5, 0x04, 0xf9, 0x1f, 0xfa, 0xf9, 0x6a, 0x7e, 0x87, 0x65, 0xd4, 0x35, 0x26,
	0x8b, 0xa8, 0x0f, 0xde, 0xe8, 0x3e, 0x57, 0x25, 0xfd, 0xdd, 0x81, 0xc1, 0x54, 0x49, 0xe4, 0xf7,
	0x93, 0xea, 0x5a, 0x7d, 0x55, 0x72, 0xcb, 0x85, 0xc0, 0xb4, 0xbe, 0xca, 0x42, 0xf2, 0x06, 0xbc,
	0x79, 0x9a, 0x25, 0x77, 0xe6, 0x9a, 0x30, 0xde, 0x3b, 0xae, 0x13, 0x3f, 0xd3, 0xec, 0xd8, 0x61,
	0x95, 0x99, 0x9c, 0x40, 0xa8, 0x24, 0x17, 0x05, 0x4f, 0xd4, 0x32, 0x13, 0xe6, 0xe6, 0x30, 0x3e,
	0x68, 0xbc, 0x67, 0xad, 0x6d, 0xec, 0xb0, 0x75, 0x57, 0x12, 0x43, 0x90, 0x23, 0xca, 0x19, 0x9f,
	0xa7, 0x18, 0xf5, 0x4c, 0x1c, 0x69, 0xe2, 0xae, 0x6b, 0xcb, 0xd8, 0x61, 0xad, 0x1b, 0xb9, 0x80,
	0xfd, 0x24, 0x13, 0x05, 0x8a, 0x62, 0x55, 0xd8, 0x1a, 0x22, 0xcf, 0x84, 0x3e, 0x69, 0x42, 0x3f,
	0x6f, 0x38, 0x8c, 0x1d, 0xb6, 0x15, 0x74, 0x16, 0x80, 0x9f, 0x64, 0x42, 0xa1, 0x50, 0xf4, 0x29,
	0x78, 0xa6, 0x26, 0x42, 0xa0, 0xb7, 0xe0, 0x8a, 0xdb, 0x4e, 0x98, 0x33, 0x1d, 0x40, 0xb8, 0x56,
	0x02, 0xfd, 0xe3, 0x42, 0xd0, 0xa4, 0xa6, 0x03, 0x26, 0xe5, 0xe5, 0xb9, 0x09, 0x08, 0x98, 0x39,
	0x93, 0x53, 0xf0, 0xb5, 0xc3, 0x84, 0xe7, 0x51, 0xe7, 0xb0, 0x7b, 0x14, 0xc6, 0x2f, 0xb6, 0x6b,
	0x3a, 0xb6, 0x1e, 0x23, 0xa1, 0x64, 0xc9, 0x6a, 0xff, 0xe1, 0x25, 0xec, 0xae, 0x1b, 0xc8, 0x3e,
	0x74, 0xf5, 0x30, 0x2b, 0x75, 0x7d, 0x24, 0xaf, 0xc0, 0x7b, 0xe0, 0xe9, 0x0a, 0xed, 0x50, 0x06,
	0x8f, 0xa4, 0x59, 0x65, 0xfb, 0xd8, 0x39, 0x71, 0xe9, 0x2f, 0x17, 0x7a, 0x9a, 0xd3, 0x1b, 0xb3,
	0xcc, 0x3f, 0x2d, 0x16, 0x12, 0x8b, 0xc2, 0x2a, 0xb5, 0x84, 0x2e, 0x20, 0xcf, 0xa4, 0x32, 0x72,
	0x01, 0x33, 0x67, 0xb3, 0x45, 0x88, 0xf2, 0xf2, 0xdc, 0xcc, 0x32, 0x60, 0x16, 0x69, 0xa5, 0x5b,
	0xe4, 0x52, 0x9d, 0x21, 0x57, 0x66, 0x5c, 0x1e, 0x6b, 0x09, 0xbb, 0x7b, 0x57, 0x58, 0x9a, 0x71,
	0x54, 0xbb, 0x77, 0x85, 0x25, 0xfd, 0xeb, 0xc2, 0xfe, 0xe6, 0x40, 0xc8, 0x21, 0x84, 0x0d, 0xd7,
	0xb4, 0x6f, 0x9d, 0x22, 0x2f, 0xa1, 0xf7, 0x6d, 0x89, 0x3f, 0xb7, 0xea, 0xd4, 0x24, 0x33, 0x26,
	0xf2, 0x1c, 0x60, 0x8a, 0x3f, 0x56, 0x28, 0x12, 0xb4, 0xb9, 0x76, 0xd9, 0x1a, 0x43, 0x5e, 0xdb,
	0xb1, 0xda, 0xd5, 0xda, 0x58, 0x60, 0x66, 0x67, 0x3e, 0x84, 0x9d, 0x29, 0x8a, 0x85, 0xa9, 0xd7,
	0x33, 0x79, 0x34, 0x58, 0xff, 0x1c, 0x93, 0xe2, 0x66, 0x56, 0xe6, 0x18, 0xf5, 0x4d, 0xbd, 0x35,
	0xa4, 0xac, 0x4a, 0x4f, 0x57, 0xad, 0xbf, 0x4d, 0x0d, 0x16, 0x69, 0xd5, 0xaf, 0xc8, 0x2b, 0xd5,
	0xaa, 0xb7, 0x0d, 0xd6, 0x31, 0xd7, 0x75, 0x7f, 0xbb, 0x3a, 0xa6, 0x42, 0xf1, 0xa8, 0xfe, 0x37,
	0xa7, 0x28, 0x1f, 0x96, 0x09, 0x92, 0x0f, 0xd0, 0xaf, 0x08, 0xf2, 0x5f, 0x93, 0x7b, 0xfd, 0x46,
	0x0c, 0xb7, 0x29, 0xea, 0x1c, 0xb9, 0xef, 0xdc, 0xf8, 0x14, 0x42, 0x2d, 0x58, 0x8b, 0xbc, 0x05,
	0xff, 0x02, 0x95, 0x59, 0x85, 0xb6, 0x03, 0xe6, 0x35, 0x18, 0x3e, 0xde, 0x1e, 0xea, 0xc4, 0x5f,
	0xe0, 0x60, 0x86, 0x85, 0x6a, 0xe6, 0x50, 0x6b, 0xc4, 0xb0, 0x37, 0x55, 0x5c, 0xb6, 0x86, 0x2d,
	0xa9, 0x0d, 0x4c, 0x9d, 0x79, 0xdf, 0xbc, 0x6f, 0xef, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf0,
	0x8f, 0x6f, 0xb7, 0xf0, 0x04, 0x00, 0x00,
}
